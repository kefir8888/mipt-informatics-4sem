        -:    0:Source:array.c
        -:    0:Graph:./2task.gcno
        -:    0:Data:./2task.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "stdio.h"
        -:    2:#include "malloc.h"
        -:    3:#include "assert.h"
        -:    4:#include "array.h"
        -:    5:
        -:    6:#define check(COND) { if (COND) { } else { fprintf (stderr, "Condition '%s' is false!\n", #COND); assert (0); } }
        -:    7:
        -:    8://TODO enum to errors  DONE
        -:    9://TODO gitlog min 15   DONE
        -:   10://TODO coverage > 95 % DONE
        -:   11://gcc -fprofile-arcs -ftest-coverage -std=c99 1task.c -o 1task
        -:   12://./1task
        -:   13://gcov -b ./1task.c | tee output.txt
        -:   14://TODO valgrind        DONE
        -:   15:// valgrind --leak-check=full --leak-resolution=med ./1task
        -:   16://TODO makefile                (?)
        -:   17://TODO unittests       DONE
        -:   18://TODO move massive to library (?)
        -:   19:
        -:   20:const int DEF_LEN    = 10;
        -:   21:const int MEM_STEP   = 10;
        -:   22:const int MAX_DATASZ = 301; //azaza
        -:   23:
        -:   24:int arrays_count = 0;
        -:   25:const char* OK_EXITING = "You've deleted all the arrays.\n";
        -:   26:const char* NOT_OK_EXITING = "You've not deleted all the arrays.\n'";
        -:   27:
        -:   28:enum {UNABLE_TO_ALLOCATE_MEMORY,
        -:   29:      ELEMENT_NOT_ADDED,
        -:   30:      WRITE_TO_UNALLOCATED_MEMORY,
        -:   31:      GARBAGE_READ};
        -:   32:
        -:   33:const char* ERRORS [] = {"Unable to allocate memory for %i elements, max count is %i.\n",
        -:   34:			 "Element not added.\n",
        -:   35:			 "Trying to write to unallocated memory - element %i. Max number is %i. I'll drop that.\n",
        -:   36:			 "Trying to read garbage from not filled memory at index %i. Max ind %i.\n"};
        -:   37:
function _Z18print_exit_messagev called 2 returned 100% blocks executed 100%
        2:   38:void print_exit_message ()
        -:   39:	{
        2:   40:	if (arrays_count == 0) printf ("%s", OK_EXITING);
переход  0 выполнен 50% (fallthrough)
переход  1 выполнен 50%
вызов    2 вернул 100%
        1:   41:	else printf ("%s", NOT_OK_EXITING);
вызов    0 вернул 100%
        2:   42:	}
        -:   43:
        -:   44:struct array
        -:   45:	{
        -:   46:	TYPE* data;
        -:   47:	int memlen;
        -:   48:	int datalen;
        -:   49:	};
        -:   50:
function _Z13pointer_validP5array called 399 returned 100% blocks executed 75%
      399:   51:int pointer_valid (struct array* inp)
        -:   52:	{
      399:   53:	if (inp != 0) return 1;
переход  0 выполнен 100% (fallthrough)
переход  1 выполнен 0%
    #####:   54:	else return 0;
        -:   55:	}
        -:   56:
function _Z12change_memszP5arrayi called 38 returned 100% blocks executed 85%
       38:   57:int change_memsz (struct array* inp, int newmemlen)
        -:   58:	{
       38:   59:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:   60:	
       38:   61:	if (newmemlen > MAX_DATASZ)
переход  0 выполнен 18% (fallthrough)
переход  1 выполнен 82%
        -:   62:		{
        7:   63:		fprintf (stderr, ERRORS [UNABLE_TO_ALLOCATE_MEMORY],newmemlen, MAX_DATASZ);
вызов    0 вернул 100%
        -:   64:		
        7:   65:		return 0;
        -:   66:		}
        -:   67:	
       31:   68:	if (inp -> memlen == 0)
переход  0 выполнен 6% (fallthrough)
переход  1 выполнен 94%
        -:   69:		{
        2:   70:		inp -> data = (TYPE*) malloc (sizeof (TYPE) * newmemlen);
        2:   71:		inp -> memlen = newmemlen;
        -:   72:		}
        -:   73:	
        -:   74:	else
        -:   75:		{
       29:   76:		printf ("reallocating with new mem len %i\n", newmemlen);
вызов    0 вернул 100%
       29:   77:		inp -> data = (TYPE*) realloc (inp -> data, newmemlen * sizeof (TYPE));
       29:   78:		inp -> memlen = newmemlen;
        -:   79:		}
        -:   80:	
       31:   81:	return 1;
        -:   82:	}
        -:   83:
function _Z10init_arrayP5array called 2 returned 100% blocks executed 71%
        2:   84:int init_array (struct array* inp)
        -:   85:	{
        2:   86:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:   87:	
        2:   88:	inp -> data    = 0;
        2:   89:	inp -> memlen  = 0;
        2:   90:	inp -> datalen = 0;
        -:   91:	
        2:   92:	int suc = change_memsz (inp, DEF_LEN);
вызов    0 вернул 100%
        -:   93:	
        2:   94:	arrays_count ++;
        -:   95:	
        2:   96:	return suc;
        -:   97:	}
        -:   98:
function _Z12delete_arrayP5array called 2 returned 100% blocks executed 67%
        2:   99:int delete_array (struct array* inp)
        -:  100:	{
        2:  101:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  102:	
        2:  103:	free (inp -> data);
        2:  104:	inp -> datalen = 0;
        2:  105:	inp -> memlen  = 0;
        -:  106:	
        2:  107:	arrays_count --;
        -:  108:	
        2:  109:	return 1;
        -:  110:	}
        -:  111:
function _Z18add_element_to_endP5arrayi called 314 returned 100% blocks executed 83%
      314:  112:int add_element_to_end (struct array* inp, TYPE new_element)
        -:  113:	{
      314:  114:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  115:	
      314:  116:	int success = 1;
        -:  117:	
      314:  118:	if (inp -> datalen + 1 >= inp -> memlen)
переход  0 выполнен 11% (fallthrough)
переход  1 выполнен 89%
        -:  119:		{
       36:  120:		success = change_memsz (inp, inp -> memlen + MEM_STEP);
вызов    0 вернул 100%
        -:  121:		}
        -:  122:	
      314:  123:	if (success == 1) inp -> data [inp -> datalen ++] = new_element;
переход  0 выполнен 98% (fallthrough)
переход  1 выполнен 2%
        7:  124:	else fprintf (stderr, ERRORS [ELEMENT_NOT_ADDED]);
вызов    0 вернул 100%
        -:  125:	
      314:  126:	return success;
        -:  127:	}
        -:  128:
function _Z23remove_element_from_endP5array called 1 returned 100% blocks executed 67%
        1:  129:int remove_element_from_end (struct array* inp)
        -:  130:	{
        1:  131:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  132:	
        1:  133:	inp -> datalen --;
        -:  134:	
        1:  135:	return 1;
        -:  136:	}
        -:  137:
function _Z14change_elementP5arrayii called 1 returned 100% blocks executed 56%
        1:  138:int change_element (struct array* inp, int ind, TYPE new_element)
        -:  139:	{
        1:  140:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  141:	
        1:  142:	if (ind >= inp -> memlen)
переход  0 выполнен 0% (fallthrough)
переход  1 выполнен 100%
        -:  143:		{
    #####:  144:		printf (ERRORS [WRITE_TO_UNALLOCATED_MEMORY],	ind, inp -> datalen);
вызов   0 ни разу не исполнялся
    #####:  145:		return 0;
        -:  146:		}
        -:  147:		
        -:  148:	else 	{
        1:  149:		inp -> data [ind] = new_element;
        1:  150:		return 1;
        -:  151:		}
        -:  152:	}
        -:  153:
function _Z10zero_arrayP5array called 1 returned 100% blocks executed 78%
        1:  154:int zero_array (struct array* inp)
        -:  155:	{
        1:  156:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  157:	
        1:  158:	int i = 0;
        8:  159:	for (; i < inp -> datalen; i ++) inp -> data [i] = 0;
переход  0 выполнен 88% (fallthrough)
переход  1 выполнен 13%
        1:  160:	inp -> datalen = 0;
        -:  161:	
        1:  162:	return 1;
        -:  163:	}
        -:  164:
function _Z11bubble_sortP5array called 1 returned 100% blocks executed 84%
        1:  165:int bubble_sort (struct array* inp)
        -:  166:	{
        1:  167:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  168:	
        8:  169:	for (int i = inp -> datalen; i > 0; i --)
переход  0 выполнен 88% (fallthrough)
переход  1 выполнен 13%
        -:  170:		{
       28:  171:		for (int j = 0; j < i - 1; j ++)
переход  0 выполнен 75% (fallthrough)
переход  1 выполнен 25%
        -:  172:			{
       21:  173:			if (inp -> data [j] < inp -> data [j + 1])
переход  0 выполнен 52% (fallthrough)
переход  1 выполнен 48%
        -:  174:				{
       11:  175:				TYPE temp = inp -> data [j];
       11:  176:				inp -> data [j] = inp -> data [j + 1];
       11:  177:				inp -> data [j + 1] = temp;
        -:  178:				}
        -:  179:			}
        -:  180:		}
        -:  181:	
        1:  182:	int success = 1;
        -:  183:	
        7:  184:	for (int i = 0; i < inp -> datalen - 1; i ++)
переход  0 выполнен 86% (fallthrough)
переход  1 выполнен 14%
        6:  185:		if (inp -> data [i] < inp -> data [i + 1]) success = 0;
переход  0 выполнен 0% (fallthrough)
переход  1 выполнен 100%
        -:  186:		
        1:  187:	return success;
        -:  188:	}
        -:  189:
function _Z11get_datalenP5array called 1 returned 100% blocks executed 67%
        1:  190:int get_datalen (struct array* inp)
        -:  191:	{
        1:  192:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  193:	
        1:  194:	return inp -> datalen;
        -:  195:	}
        -:  196:
function _Z10get_memlenP5array called 1 returned 100% blocks executed 67%
        1:  197:int get_memlen (struct array* inp)
        -:  198:	{
        1:  199:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  200:	
        1:  201:	return inp -> memlen;
        -:  202:	}
        -:  203:
function _Z13print_elementP5arrayi called 29 returned 100% blocks executed 60%
       29:  204:int print_element (struct array* inp, int ind)
        -:  205:	{
       29:  206:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  207:	
       29:  208:	if (ind >= inp -> datalen)
переход  0 выполнен 0% (fallthrough)
переход  1 выполнен 100%
        -:  209:		{
    #####:  210:		printf (ERRORS [GARBAGE_READ], ind, inp -> datalen);
вызов   0 ни разу не исполнялся
        -:  211:		
    #####:  212:		return 0;
        -:  213:		}
        -:  214:	
       29:  215:	printf ("%i", inp -> data [ind]);
вызов    0 вернул 100%
        -:  216:	
       29:  217:	return 1;
        -:  218:	}
        -:  219:
function _Z11print_arrayP5array called 6 returned 100% blocks executed 83%
        6:  220:int print_array (struct array* inp)
        -:  221:	{
        6:  222:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  223:	
        6:  224:	int i = 0;
        -:  225:	
       64:  226:	for (; i < inp -> datalen; i ++)
переход  0 выполнен 83% (fallthrough)
переход  1 выполнен 17%
        -:  227:		{
       29:  228:		print_element (inp, i);
вызов    0 вернул 100%
       29:  229:		printf (" ");
вызов    0 вернул 100%
        -:  230:		}
        -:  231:	
        6:  232:	printf ("\n");
вызов    0 вернул 100%
        -:  233:	
        6:  234:	return 1;
        -:  235:	}
        -:  236:
function _Z18verbose_full_printP5array called 2 returned 100% blocks executed 80%
        2:  237:int verbose_full_print (struct array* inp)
        -:  238:	{
        2:  239:	check (pointer_valid (inp))
вызов    0 вернул 100%
переход  1 выполнен 0% (fallthrough)
переход  2 выполнен 100%
вызов   3 ни разу не исполнялся
вызов   4 ни разу не исполнялся
        -:  240:	
        2:  241:	printf ("---------------------------------------------------------------\n");
вызов    0 вернул 100%
        6:  242:	printf ("Printing data about obj at %x: \nAllocated memory %i bytes (for %i elements), used %i b, %i el.\n",
        6:  243:		/*(unsigned int)*/ inp, (inp -> memlen) * sizeof (TYPE), inp -> memlen, (inp -> datalen) * sizeof (TYPE), inp -> datalen);
вызов    0 вернул 100%
        2:  244:	printf ("Printing data in the array:\n");
вызов    0 вернул 100%
        2:  245:	print_array (inp);
вызов    0 вернул 100%
        -:  246:	
        2:  247:	return 1;
        -:  248:	}
